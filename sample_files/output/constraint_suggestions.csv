code_for_constraint|column_name|constraint_name|current_value|description|rule_description|suggesting_rule|filename_path|timestamp|profile_date
".isContainedIn(\"Rating\", [\"1\", \"3\", \"5\", \"8\", \"6\", \"10\", \"9\", \"2\", \"7\", \"4\"])"|Rating|ComplianceConstraint(Compliance('Rating' has value range '1', '3', '5', '8', '6', '10', '9', '2', '7', '4',`Rating` IN ('1', '3', '5', '8', '6', '10', '9', '2', '7', '4'),None))|Compliance: 1|'Rating' has value range '1', '3', '5', '8', '6', '10', '9', '2', '7', '4'|If we see a categorical range for a column, we suggest an IS IN (...) constraint|CategoricalRangeRule()|dbfs:/mnt/inputcsv/movies.csv|2021-01-13T16:43:40.649Z|2021-01-13
".isContainedIn(\"Rating\", [\"1\", \"3\", \"5\", \"8\", \"6\", \"10\", \"9\", \"2\", \"7\"], lambda x: x >= 0.89, \"It should be above 0.89!\")"|Rating|ComplianceConstraint(Compliance('Rating' has value range '1', '3', '5', '8', '6', '10', '9', '2', '7' for at least 89.0% of values,`Rating` IN ('1', '3', '5', '8', '6', '10', '9', '2', '7'),None))|Compliance: 0.9057534246575343|'Rating' has value range '1', '3', '5', '8', '6', '10', '9', '2', '7' for at least 89.0% of values|If we see a categorical range for most values in a column, we suggest an IS IN (...) constraint that should hold for most values|FractionalCategoricalRangeRule(0.9)|dbfs:/mnt/inputcsv/movies.csv|2021-01-13T16:43:40.649Z|2021-01-13
".isNonNegative(\"Rating\")"|Rating|ComplianceConstraint(Compliance('Rating' has no negative values,Rating >= 0,None))|Minimum: 1.0|'Rating' has no negative values|If we see only non-negative numbers in a column, we suggest a corresponding constraint|NonNegativeNumbersRule()|dbfs:/mnt/inputcsv/movies.csv|2021-01-13T16:43:40.649Z|2021-01-13
".hasCompleteness(\"Rating\", lambda x: x >= 0.99, \"It should be above 0.99!\")"|Rating|CompletenessConstraint(Completeness(Rating,None))|Completeness: 0.9997808219178083|'Rating' has less than 1% missing values|If a column is incomplete in the sample, we model its completeness as a binomial variable, estimate a confidence interval and use this to define a lower bound for the completeness|RetainCompletenessRule()|dbfs:/mnt/inputcsv/movies.csv|2021-01-13T16:43:40.649Z|2021-01-13
".isComplete(\"movie\")"|movie|CompletenessConstraint(Completeness(movie,None))|Completeness: 1.0|'movie' is not null|If a column is complete in the sample, we suggest a NOT NULL constraint|CompleteIfCompleteRule()|dbfs:/mnt/inputcsv/movies.csv|2021-01-13T16:43:40.649Z|2021-01-13
".isNonNegative(\"movie\")"|movie|ComplianceConstraint(Compliance('movie' has no negative values,movie >= 0,None))|Minimum: 1.0|'movie' has no negative values|If we see only non-negative numbers in a column, we suggest a corresponding constraint|NonNegativeNumbersRule()|dbfs:/mnt/inputcsv/movies.csv|2021-01-13T16:43:40.649Z|2021-01-13
".isUnique(\"movie\")"|movie|UniquenessConstraint(Uniqueness(List(movie),None))|ApproxDistinctness: 0.9943013698630137|'movie' is unique|If the ratio of approximate num distinct values in a column is close to the number of records (within the error of the HLL sketch), we suggest a UNIQUE constraint|UniqueIfApproximatelyUniqueRule()|dbfs:/mnt/inputcsv/movies.csv|2021-01-13T16:43:40.649Z|2021-01-13
".isContainedIn(\"year\", [\"2000\", \"1997\", \"2001\", \"1994\", \"1995\", \"1998\", \"2005\", \"2007\", \"1999\", \"2002\", \"2008\", \"2003\", \"2006\", \"1996\", \"2009\", \"2011\", \"2010\", \"2004\", \"2012\", \"2013\", \"1993\", \"2014\", \"1992\", \"1988\", \"1987\", \"1990\", \"1989\", \"1986\", \"1985\", \"1991\", \"2015\", \"1984\", \"1981\", \"1983\", \"1980\", \"1979\", \"1982\", \"1978\", \"1977\", \"1974\", \"1975\", \"1971\", \"1972\", \"1967\", \"1970\", \"1976\", \"1966\", \"1953\", \"1968\", \"1965\", \"1973\", \"1963\", \"1962\", \"1959\", \"1955\", \"1961\", \"1964\", \"1960\", \"1957\", \"1956\", \"2016\", \"1969\", \"1958\", \"1946\", \"1954\", \"1947\", \"1949\", \"1941\", \"1944\", \"1950\", \"1952\", \"1938\", \"1951\", \"1942\", \"1943\", \"1939\", \"1948\", \"1936\", \"1931\", \"1945\", \"1937\", \"1933\", \"1940\", \"1935\", \"1934\", \"1927\", \"1926\", \"1925\", \"1930\", \"1929\", \"1932\", \"1923\", \"1924\", \"1922\", \"1921\", \"1928\", \"1915\", \"1919\", \"1920\", \"1917\", \"1918\", \"-1980\", \"1902\"])"|year|ComplianceConstraint(Compliance('year' has value range '2000', '1997', '2001', '1994', '1995', '1998', '2005', '2007', '1999', '2002', '2008', '2003', '2006', '1996', '2009', '2011', '2010', '2004', '2012', '2013', '1993', '2014', '1992', '1988', '1987', '1990', '1989', '1986', '1985', '1991', '2015', '1984', '1981', '1983', '1980', '1979', '1982', '1978', '1977', '1974', '1975', '1971', '1972', '1967', '1970', '1976', '1966', '1953', '1968', '1965', '1973', '1963', '1962', '1959', '1955', '1961', '1964', '1960', '1957', '1956', '2016', '1969', '1958', '1946', '1954', '1947', '1949', '1941', '1944', '1950', '1952', '1938', '1951', '1942', '1943', '1939', '1948', '1936', '1931', '1945', '1937', '1933', '1940', '1935', '1934', '1927', '1926', '1925', '1930', '1929', '1932', '1923', '1924', '1922', '1921', '1928', '1915', '1919', '1920', '1917', '1918', '-1980', '1902',`year` IN ('2000', '1997', '2001', '1994', '1995', '1998', '2005', '2007', '1999', '2002', '2008', '2003', '2006', '1996', '2009', '2011', '2010', '2004', '2012', '2013', '1993', '2014', '1992', '1988', '1987', '1990', '1989', '1986', '1985', '1991', '2015', '1984', '1981', '1983', '1980', '1979', '1982', '1978', '1977', '1974', '1975', '1971', '1972', '1967', '1970', '1976', '1966', '1953', '1968', '1965', '1973', '1963', '1962', '1959', '1955', '1961', '1964', '1960', '1957', '1956', '2016', '1969', '1958', '1946', '1954', '1947', '1949', '1941', '1944', '1950', '1952', '1938', '1951', '1942', '1943', '1939', '1948', '1936', '1931', '1945', '1937', '1933', '1940', '1935', '1934', '1927', '1926', '1925', '1930', '1929', '1932', '1923', '1924', '1922', '1921', '1928', '1915', '1919', '1920', '1917', '1918', '-1980', '1902'),None))|Compliance: 1|'year' has value range '2000', '1997', '2001', '1994', '1995', '1998', '2005', '2007', '1999', '2002', '2008', '2003', '2006', '1996', '2009', '2011', '2010', '2004', '2012', '2013', '1993', '2014', '1992', '1988', '1987', '1990', '1989', '1986', '1985', '1991', '2015', '1984', '1981', '1983', '1980', '1979', '1982', '1978', '1977', '1974', '1975', '1971', '1972', '1967', '1970', '1976', '1966', '1953', '1968', '1965', '1973', '1963', '1962', '1959', '1955', '1961', '1964', '1960', '1957', '1956', '2016', '1969', '1958', '1946', '1954', '1947', '1949', '1941', '1944', '1950', '1952', '1938', '1951', '1942', '1943', '1939', '1948', '1936', '1931', '1945', '1937', '1933', '1940', '1935', '1934', '1927', '1926', '1925', '1930', '1929', '1932', '1923', '1924', '1922', '1921', '1928', '1915', '1919', '1920', '1917', '1918', '-1980', '1902'|If we see a categorical range for a column, we suggest an IS IN (...) constraint|CategoricalRangeRule()|dbfs:/mnt/inputcsv/movies.csv|2021-01-13T16:43:40.649Z|2021-01-13
".isContainedIn(\"year\", [\"2000\", \"1997\", \"2001\", \"1994\", \"1995\", \"1998\", \"2005\", \"2007\", \"1999\", \"2002\", \"2008\", \"2003\", \"2006\", \"1996\", \"2009\", \"2011\", \"2010\", \"2004\", \"2012\", \"2013\", \"1993\", \"2014\", \"1992\", \"1988\", \"1987\", \"1990\", \"1989\", \"1986\", \"1985\", \"1991\", \"2015\", \"1984\", \"1981\", \"1983\", \"1980\", \"1979\", \"1982\", \"1978\", \"1977\", \"1974\", \"1975\", \"1971\", \"1972\", \"1967\", \"1970\", \"1976\", \"1966\", \"1953\", \"1968\", \"1965\", \"1973\", \"1963\", \"1962\", \"1959\", \"1955\"], lambda x: x >= 0.89, \"It should be above 0.89!\")"|year|ComplianceConstraint(Compliance('year' has value range '2000', '1997', '2001', '1994', '1995', '1998', '2005', '2007', '1999', '2002', '2008', '2003', '2006', '1996', '2009', '2011', '2010', '2004', '2012', '2013', '1993', '2014', '1992', '1988', '1987', '1990', '1989', '1986', '1985', '1991', '2015', '1984', '1981', '1983', '1980', '1979', '1982', '1978', '1977', '1974', '1975', '1971', '1972', '1967', '1970', '1976', '1966', '1953', '1968', '1965', '1973', '1963', '1962', '1959', '1955' for at least 89.0% of values,`year` IN ('2000', '1997', '2001', '1994', '1995', '1998', '2005', '2007', '1999', '2002', '2008', '2003', '2006', '1996', '2009', '2011', '2010', '2004', '2012', '2013', '1993', '2014', '1992', '1988', '1987', '1990', '1989', '1986', '1985', '1991', '2015', '1984', '1981', '1983', '1980', '1979', '1982', '1978', '1977', '1974', '1975', '1971', '1972', '1967', '1970', '1976', '1966', '1953', '1968', '1965', '1973', '1963', '1962', '1959', '1955'),None))|Compliance: 0.9020273972602739|'year' has value range '2000', '1997', '2001', '1994', '1995', '1998', '2005', '2007', '1999', '2002', '2008', '2003', '2006', '1996', '2009', '2011', '2010', '2004', '2012', '2013', '1993', '2014', '1992', '1988', '1987', '1990', '1989', '1986', '1985', '1991', '2015', '1984', '1981', '1983', '1980', '1979', '1982', '1978', '1977', '1974', '1975', '1971', '1972', '1967', '1970', '1976', '1966', '1953', '1968', '1965', '1973', '1963', '1962', '1959', '1955' for at least 89.0% of values|If we see a categorical range for most values in a column, we suggest an IS IN (...) constraint that should hold for most values|FractionalCategoricalRangeRule(0.9)|dbfs:/mnt/inputcsv/movies.csv|2021-01-13T16:43:40.649Z|2021-01-13
".hasCompleteness(\"year\", lambda x: x >= 0.99, \"It should be above 0.99!\")"|year|CompletenessConstraint(Completeness(year,None))|Completeness: 0.9997808219178083|'year' has less than 1% missing values|If a column is incomplete in the sample, we model its completeness as a binomial variable, estimate a confidence interval and use this to define a lower bound for the completeness|RetainCompletenessRule()|dbfs:/mnt/inputcsv/movies.csv|2021-01-13T16:43:40.649Z|2021-01-13
".hasCompleteness(\"genres\", lambda x: x >= 0.99, \"It should be above 0.99!\")"|genres|CompletenessConstraint(Completeness(genres,None))|Completeness: 0.9997808219178083|'genres' has less than 1% missing values|If a column is incomplete in the sample, we model its completeness as a binomial variable, estimate a confidence interval and use this to define a lower bound for the completeness|RetainCompletenessRule()|dbfs:/mnt/inputcsv/movies.csv|2021-01-13T16:43:40.649Z|2021-01-13
".isContainedIn(\"Rotton Tomato\", [\"90\", \"97\", \"95\", \"81\", \"50\", \"56\", \"88\", \"83\", \"92\", \"87\", \"54\", \"93\", \"91\", \"65\", \"72\", \"52\", \"58\", \"59\", \"51\", \"74\", \"61\", \"67\", \"68\", \"100\", \"89\", \"86\", \"82\", \"71\", \"79\", \"98\", \"64\", \"69\", \"94\", \"60\", \"80\", \"99\", \"63\", \"62\", \"70\", \"78\", \"77\", \"66\", \"96\", \"57\", \"84\", \"85\", \"75\", \"55\", \"53\", \"73\", \"76\"])"|Rotton Tomato|ComplianceConstraint(Compliance('Rotton Tomato' has value range '90', '97', '95', '81', '50', '56', '88', '83', '92', '87', '54', '93', '91', '65', '72', '52', '58', '59', '51', '74', '61', '67', '68', '100', '89', '86', '82', '71', '79', '98', '64', '69', '94', '60', '80', '99', '63', '62', '70', '78', '77', '66', '96', '57', '84', '85', '75', '55', '53', '73', '76',`Rotton Tomato` IN ('90', '97', '95', '81', '50', '56', '88', '83', '92', '87', '54', '93', '91', '65', '72', '52', '58', '59', '51', '74', '61', '67', '68', '100', '89', '86', '82', '71', '79', '98', '64', '69', '94', '60', '80', '99', '63', '62', '70', '78', '77', '66', '96', '57', '84', '85', '75', '55', '53', '73', '76'),None))|Compliance: 1|'Rotton Tomato' has value range '90', '97', '95', '81', '50', '56', '88', '83', '92', '87', '54', '93', '91', '65', '72', '52', '58', '59', '51', '74', '61', '67', '68', '100', '89', '86', '82', '71', '79', '98', '64', '69', '94', '60', '80', '99', '63', '62', '70', '78', '77', '66', '96', '57', '84', '85', '75', '55', '53', '73', '76'|If we see a categorical range for a column, we suggest an IS IN (...) constraint|CategoricalRangeRule()|dbfs:/mnt/inputcsv/movies.csv|2021-01-13T16:43:40.649Z|2021-01-13
".isContainedIn(\"Rotton Tomato\", [\"90\", \"97\", \"95\", \"81\", \"50\", \"56\", \"88\", \"83\", \"92\", \"87\", \"54\", \"93\", \"91\", \"65\", \"72\", \"52\", \"58\", \"59\", \"51\", \"74\", \"61\", \"67\", \"68\", \"100\", \"89\", \"86\", \"82\", \"71\", \"79\", \"98\", \"64\", \"69\", \"94\", \"60\", \"80\", \"99\", \"63\", \"62\", \"70\", \"78\", \"77\", \"66\", \"96\", \"57\", \"84\", \"85\"], lambda x: x >= 0.9, \"It should be above 0.9!\")"|Rotton Tomato|ComplianceConstraint(Compliance('Rotton Tomato' has value range '90', '97', '95', '81', '50', '56', '88', '83', '92', '87', '54', '93', '91', '65', '72', '52', '58', '59', '51', '74', '61', '67', '68', '100', '89', '86', '82', '71', '79', '98', '64', '69', '94', '60', '80', '99', '63', '62', '70', '78', '77', '66', '96', '57', '84', '85' for at least 90.0% of values,`Rotton Tomato` IN ('90', '97', '95', '81', '50', '56', '88', '83', '92', '87', '54', '93', '91', '65', '72', '52', '58', '59', '51', '74', '61', '67', '68', '100', '89', '86', '82', '71', '79', '98', '64', '69', '94', '60', '80', '99', '63', '62', '70', '78', '77', '66', '96', '57', '84', '85'),None))|Compliance: 0.9112328767123287|'Rotton Tomato' has value range '90', '97', '95', '81', '50', '56', '88', '83', '92', '87', '54', '93', '91', '65', '72', '52', '58', '59', '51', '74', '61', '67', '68', '100', '89', '86', '82', '71', '79', '98', '64', '69', '94', '60', '80', '99', '63', '62', '70', '78', '77', '66', '96', '57', '84', '85' for at least 90.0% of values|If we see a categorical range for most values in a column, we suggest an IS IN (...) constraint that should hold for most values|FractionalCategoricalRangeRule(0.9)|dbfs:/mnt/inputcsv/movies.csv|2021-01-13T16:43:40.649Z|2021-01-13
".isNonNegative(\"Rotton Tomato\")"|Rotton Tomato|ComplianceConstraint(Compliance('Rotton Tomato' has no negative values,Rotton Tomato >= 0,None))|Minimum: 50.0|'Rotton Tomato' has no negative values|If we see only non-negative numbers in a column, we suggest a corresponding constraint|NonNegativeNumbersRule()|dbfs:/mnt/inputcsv/movies.csv|2021-01-13T16:43:40.649Z|2021-01-13
".hasCompleteness(\"Rotton Tomato\", lambda x: x >= 0.99, \"It should be above 0.99!\")"|Rotton Tomato|CompletenessConstraint(Completeness(Rotton Tomato,None))|Completeness: 0.9997808219178083|'Rotton Tomato' has less than 1% missing values|If a column is incomplete in the sample, we model its completeness as a binomial variable, estimate a confidence interval and use this to define a lower bound for the completeness|RetainCompletenessRule()|dbfs:/mnt/inputcsv/movies.csv|2021-01-13T16:43:40.649Z|2021-01-13
".isComplete(\"title\")"|title|CompletenessConstraint(Completeness(title,None))|Completeness: 1.0|'title' is not null|If a column is complete in the sample, we suggest a NOT NULL constraint|CompleteIfCompleteRule()|dbfs:/mnt/inputcsv/movies.csv|2021-01-13T16:43:40.649Z|2021-01-13
".isUnique(\"title\")"|title|UniquenessConstraint(Uniqueness(List(title),None))|ApproxDistinctness: 0.9949589041095891|'title' is unique|If the ratio of approximate num distinct values in a column is close to the number of records (within the error of the HLL sketch), we suggest a UNIQUE constraint|UniqueIfApproximatelyUniqueRule()|dbfs:/mnt/inputcsv/movies.csv|2021-01-13T16:43:40.649Z|2021-01-13
